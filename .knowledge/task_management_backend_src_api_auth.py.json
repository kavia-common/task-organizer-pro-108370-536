{"is_source_file": true, "format": "Python", "description": "This file contains FastAPI route handlers for authentication, including user sign-up, login, and retrieval of current user information. It manages user data with database interactions, inspects passwords with hashing, and provides endpoints for user management.", "external_files": ["src.api.models", "src.api.db"], "external_methods": ["get_db_session", "select", "hash_password", "verify_password"], "published": ["router"], "classes": [], "methods": [{"name": "signup( user_in: UserSignup, db: AsyncSession = Depends(get_db_session), )", "description": "Handles user registration, checks for existing email, hashes password, and creates user record in database.", "scope": "", "scopeKind": ""}, {"name": "login( login_in: UserLogin, db: AsyncSession = Depends(get_db_session), )", "description": "Authenticates user credentials and issues a fake token upon success.", "scope": "", "scopeKind": ""}, {"name": "get_me( token: Optional[str] = None, db: AsyncSession = Depends(get_db_session), )", "description": "Retrieves current user info based on a fake token pattern.", "scope": "", "scopeKind": ""}, {"name": "str hash_password(password: str)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "bool verify_password(plain_password: str, hashed: str)", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["select(User).where(User.email == user_in.email)", "db.execute(...)", "db.add(new_user)", "db.commit()", "db.refresh(new_user)", "db.execute(select(User).where(User.email == login_in.email))", "verify_password(login_in.password, user.hashed_password)", "db.execute(select(User).where(User.id == user_id))"], "search-terms": ["auth", "signup", "login", "get_me", "fake-token", "Password hashing", "FastAPI APIRouter"], "state": 2, "file_id": 6, "knowledge_revision": 27, "git_revision": "23f42520d5aaa49c092967f454ba09f8e77122bf", "revision_history": [{"13": ""}, {"17": "270a6dfd17ac7cb04d63bea979cec810b38796b1"}, {"23": "270a6dfd17ac7cb04d63bea979cec810b38796b1"}, {"24": "23f42520d5aaa49c092967f454ba09f8e77122bf"}, {"27": "23f42520d5aaa49c092967f454ba09f8e77122bf"}], "ctags": [{"_type": "tag", "name": "get_me", "path": "/home/kavia/workspace/code-generation/task-organizer-pro-108370-536/task_management_backend/src/api/auth.py", "pattern": "/^async def get_me($/", "language": "Python", "kind": "function", "signature": "( token: Optional[str] = None, db: AsyncSession = Depends(get_db_session), )"}, {"_type": "tag", "name": "hash_password", "path": "/home/kavia/workspace/code-generation/task-organizer-pro-108370-536/task_management_backend/src/api/auth.py", "pattern": "/^def hash_password(password: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(password: str)"}, {"_type": "tag", "name": "login", "path": "/home/kavia/workspace/code-generation/task-organizer-pro-108370-536/task_management_backend/src/api/auth.py", "pattern": "/^async def login($/", "language": "Python", "kind": "function", "signature": "( login_in: UserLogin, db: AsyncSession = Depends(get_db_session), )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/task-organizer-pro-108370-536/task_management_backend/src/api/auth.py", "pattern": "/^router = APIRouter(prefix=\"\\/auth\", tags=[\"Authentication\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "signup", "path": "/home/kavia/workspace/code-generation/task-organizer-pro-108370-536/task_management_backend/src/api/auth.py", "pattern": "/^async def signup($/", "language": "Python", "kind": "function", "signature": "( user_in: UserSignup, db: AsyncSession = Depends(get_db_session), )"}, {"_type": "tag", "name": "verify_password", "path": "/home/kavia/workspace/code-generation/task-organizer-pro-108370-536/task_management_backend/src/api/auth.py", "pattern": "/^def verify_password(plain_password: str, hashed: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "function", "signature": "(plain_password: str, hashed: str)"}], "hash": "e1ac66e3a81b127c3aa33d10e11b46d7", "format-version": 4, "code-base-name": "task_management_backend", "filename": "task_management_backend/src/api/auth.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/auth\", tags=[\"Authentication\"])", "scope": "", "scopeKind": "", "description": "unavailable"}]}